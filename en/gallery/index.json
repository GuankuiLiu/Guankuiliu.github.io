[{"content":"Plots 1 2 3 4 5 6  # pkg\u0026gt; add Plots PyPlot GR UnicodePlots using Plots # pyplot() # PyPlot backend eq(d) = -7.65 * sind(d) + 9.87 * sind(2d + 206) plot(eq, 1:365)   UnicodePlots 1 2 3 4 5  # add UnicodePlots using UnicodePlots FirstLinePlot = lineplot([1, 2, 3, 7], [1, 2, -5, 7], title = \u0026#34;First Line Plot\u0026#34;, border = :dotted) UnicodePlots.savefig(FirstLinePlot, \u0026#34;FirstLinePlot.txt\u0026#34;)   1 2  FirstDensityPlot = densityplot(collect(1:100), randn(100), border = :dotted) UnicodePlots.savefig(FirstDensityPlot, \u0026#34;FirstDensityPlot.txt\u0026#34;)   VegaLite 1 2 3 4 5 6  # add VegaLite using VegaLite X = [\u0026#34;Monday\u0026#34;, \u0026#34;Tuesday\u0026#34;, \u0026#34;Wednesday\u0026#34;, \u0026#34;Thrusday\u0026#34;, \u0026#34;Friday\u0026#34;,\u0026#34;Saturday\u0026#34;,\u0026#34;Sunday\u0026#34;] Y = [11, 11, 15, 13, 12, 13, 10] P = pie(X, Y)   Winston 1 2 3 4 5 6 7 8 9  using Winston x = range(0, stop = 3pi, length = 100); c = cos.(x); s = sin.(x); p = FramedPlot(title = \u0026#34;Winston Graphics!\u0026#34;, xlabel = \u0026#34;\\\\Sigma x^2_i\u0026#34;, ylabel = \u0026#34;\\\\Theta_i\u0026#34;) add(p, FillBetween(x, c, x, s)) add(p, Curve(x, c, color = \u0026#34;black\u0026#34;)) add(p, Curve(x, s, color = \u0026#34;red\u0026#34;))   Gadfly 1 2 3 4 5  using Gadfly using RDatasets iris = dataset(\u0026#34;datasets\u0026#34;, \u0026#34;iris\u0026#34;); Gadfly.plot(iris, x = :SepalLength, y = :SepalWidth, Geom.point)   1  Gadfly.plot(iris, x = :SepalLength, y = :SepalWidth, Geom.point, Geom.line)   1  Gadfly.plot(iris, x = :SepalLength, y = :SepalWidth, color = :Species, Geom.point)   Compose 1 2 3 4  using Compose composition = compose(compose(context(), rectangle()), fill(\u0026#34;tomato\u0026#34;)) draw(SVG(\u0026#34;simple.svg\u0026#34;, 6cm, 6cm), composition)   1 2 3  composition = compose(context(), (context(), Compose.circle(), fill(\u0026#34;bisque\u0026#34;)), (context(), rectangle(), fill(\u0026#34;tomato\u0026#34;))) composition |\u0026gt; SVG(\u0026#34;simple2.svg\u0026#34;)   PyPlot 1 2 3 4 5 6 7  using Conda Conda.add(\u0026#34;matplotlib\u0026#34;) using PyPlot x = range(0; stop = 2*pi, length = 500); y = sin.(3 * x + 4 * cos.(2 * x)); PyPlot.plot(x, y, color = \u0026#34;blue\u0026#34;, linewidth = 1.0, linestyle = \u0026#34;--\u0026#34;)   1  surf(rand(20, 30))   Gaston 1 2 3 4 5  using PGFPlots R = Axis([Plots.Linear(x-\u0026gt;sin(3x)*exp(-0.3x), (0,8), legendentry = L\u0026#34;$\\sin(3x)*exp(-0.3x)$\u0026#34;), Plots.Linear(x-\u0026gt;sqrt(x)/(1+x^2), (0,8), legendentry = L\u0026#34;$\\sqrt{2x}/(1+x^2)$\u0026#34;)]) save(\u0026#34;Plot_LinearPGF.svg\u0026#34;, R)    Summary from《LEARN JULIA PROGRAMMING》  ","description":"Several commonly used Julia plotting packages","id":0,"section":"posts","tags":["Julia"],"title":"Julia plotting packages","uri":"https://guankuiliu.github.io/en/posts/2023/2023-01-19-julia-graphics/"},{"content":"你好呀！\n","description":"About Page","id":1,"section":"","tags":null,"title":"About","uri":"https://guankuiliu.github.io/en/about/"}]